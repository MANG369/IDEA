name: NodeJS with Webpack

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
            - nombre: Caché
  usos: acciones/cache@v4.2.3
  con:
    # Una lista de archivos, directorios y patrones comodín para almacenar en caché y restaurar
    camino:
    # Una clave explícita para restaurar y guardar el caché
    llave:
    # Una cadena multilínea ordenada que enumera las claves con prefijo coincidente, que se utilizan para restaurar la caché obsoleta si no se produce un acierto de caché para la clave. Nota: `cache-hit` devuelve falso en este caso.
    restaurar-claves: # opcional
    # El tamaño del fragmento utilizado para dividir archivos grandes durante la carga, en bytes
    tamaño del fragmento de carga: # opcional
    # Un valor booleano opcional, cuando está habilitado, permite que los ejecutores de Windows guarden o restauren cachés que se pueden restaurar o guardar respectivamente en otras plataformas
    enableCrossOsArchive: # opcional, el valor predeterminado es falso
    # El flujo de trabajo falla si no se encuentra la entrada de caché
    fail-on-cache-miss: # opcional, el valor predeterminado es falso
    # Verifica si existe una entrada de caché para las entradas dadas (clave, claves de restauración) sin descargar el caché
    solo búsqueda: # opcional, el valor predeterminado es falso
    # Ejecute el paso posterior para guardar el caché incluso si falla otro paso anterior
    guardar siempre: # opcional, el valor predeterminado es falso
          
    - name: Build
      run: |
        npm install
            - nombre: Cargar un artefacto de compilación
  usos: acciones/upload-artifact@v4.6.2
  con:
    # Nombre del artefacto
    nombre: # opcional, el valor predeterminado es artefacto
    # Un archivo, directorio o patrón comodín que describe qué cargar
    camino:
    # El comportamiento deseado si no se encuentran archivos utilizando la ruta proporcionada.
Opciones disponibles:
  advertir: emite una advertencia pero no hace que falle la acción
  error: Falla la acción con un mensaje de error
  ignorar: no muestra ninguna advertencia o error, la acción no falla

    if-no-files-found: # opcional, el valor predeterminado es advertir
    # Duración después de la cual el artefacto expirará en días. 0 significa usar la retención predeterminada.
Mínimo 1 día. Máximo 90 días, a menos que se modifique desde la página de configuración del repositorio.

    días de retención: # opcional
    El nivel de compresión de Zlib que se aplicará al archivo de artefactos. El valor puede variar de 0 a 9: - 0: Sin compresión - 1: Máxima velocidad - 6: Compresión predeterminada (igual que GNU Gzip) - 9: Máxima compresión. Los niveles más altos ofrecen una mejor compresión, pero tardan más en completarse. Para archivos grandes que no se comprimen fácilmente, se recomienda un valor de 0 para una carga mucho más rápida.

    nivel de compresión: # opcional, el valor predeterminado es 6
    # Si es verdadero, se eliminará un artefacto con el mismo nombre antes de cargar uno nuevo. Si es falso, la acción fallará si ya existe un artefacto con el nombre especificado. No falla si el artefacto no existe.

    sobrescribir: # opcional, el valor predeterminado es falso
    # Si es verdadero, se incluirán los archivos ocultos en el artefacto. Si es falso, se excluirán.

    include-hidden-files: # opcional, el valor predeterminado es falso

               - nombre: Configurar el entorno Node.js
  usos: acciones/setup-node@v3.9.1
  con:
    # Establezca always-auth en npmrc.
    always-auth: # opcional, el valor predeterminado es falso
    Especificación de la versión a utilizar. Ejemplos: 12.x, 10.15.1, >=10.15.0.
    node-version: # opcional
    Archivo que contiene la especificación de la versión a utilizar. Ejemplos: .nvmrc, .node-version, .tool-versions.
    archivo-versión-nodo: # opcional
    # Arquitectura de destino que usará Node. Ejemplos: x86, x64. Se usará la arquitectura del sistema por defecto.
    arquitectura: # opcional
    # Configure esta opción si desea que la acción busque la última versión disponible que satisfaga la especificación de la versión.
    check-latest: # opcional
    Registro opcional para la autenticación. Se establecerá el registro en archivos .npmrc y .yarnrc a nivel de proyecto y se configurará la autenticación para leer desde env.NODE_AUTH_TOKEN.
    URL del registro: # opcional
    # Ámbito opcional para la autenticación en registros con ámbito. Se recurrirá al propietario del repositorio al usar el registro de paquetes de GitHub (https://npm.pkg.github.com/).
    alcance: # opcional
    # Se usa para extraer distribuciones de nodos de node-versions. Dado que hay un valor predeterminado, normalmente no lo proporciona el usuario. Al ejecutar esta acción en github.com, el valor predeterminado es suficiente. Al ejecutar en GHES, puede pasar un token de acceso personal a github.com si experimenta limitaciones de velocidad.
    token: # opcional, el valor predeterminado es ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Se utiliza para especificar un gestor de paquetes para el almacenamiento en caché en el directorio predeterminado. Valores admitidos: npm, yarn, pnpm.
    caché: # opcional
    # Se utiliza para especificar la ruta a un archivo de dependencia: package-lock.json, yarn.lock, etc. Admite caracteres comodín o una lista de nombres de archivos para almacenar en caché múltiples dependencias.
    ruta de dependencia de caché: # opcional

          - nombre: Descargar un artefacto de compilación
  usos: acciones/descargar-artefacto@v4.3.0
  con:
    # Nombre del artefacto a descargar. Si no se especifica, se descargan todos los artefactos de la ejecución.
    nombre: # opcional
    # ID de los artefactos a descargar, separados por comas. Se pueden usar las entradas `artifact-ids` o `name`, pero no ambas.
    identificadores de artefactos: # opcional
    Ruta de destino. Admite expansión de tilde básica. El valor predeterminado es $GITHUB_WORKSPACE.
    ruta: # opcional
    # Un patrón glob que coincide con los artefactos que deben descargarse. Se ignora si se especifica el nombre.
    patrón: # opcional
    # Cuando se combinan varios artefactos, esto cambia el comportamiento de los directorios de destino. Si es verdadero, los artefactos descargados estarán en el mismo directorio especificado por la ruta. Si es falso, los artefactos descargados se extraerán en directorios individuales dentro de la ruta especificada.
    merge-multiple: # opcional, el valor predeterminado es falso
    # El token de GitHub utilizado para la autenticación con la API de GitHub. Esto es necesario al descargar artefactos de un repositorio diferente o de una ejecución de flujo de trabajo diferente. Si no se especifica, la acción intentará descargar artefactos del repositorio y la ejecución de flujo de trabajo actuales.
    token de github: # opcional
    # El propietario y el nombre del repositorio unidos por "/". Si se especifica github-token, este es el repositorio desde el que se descargarán los artefactos.
    repositorio: # opcional, el valor predeterminado es ${{ github.repository }}
    # El ID de la ejecución del flujo de trabajo desde donde se cargó el artefacto de descarga deseado. Si se especifica github-token, esta es la ejecución desde donde se descargarán los artefactos.
    run-id: # opcional, el valor predeterminado es ${{ github.run_id }}

 - nombre: Caché
  usos: acciones/cache@v4.2.3
  con:
    # Una lista de archivos, directorios y patrones comodín para almacenar en caché y restaurar
    camino:
    # Una clave explícita para restaurar y guardar el caché
    llave:
    # Una cadena multilínea ordenada que enumera las claves con prefijo coincidente, que se utilizan para restaurar la caché obsoleta si no se produce un acierto de caché para la clave. Nota: `cache-hit` devuelve falso en este caso.
    restaurar-claves: # opcional
    # El tamaño del fragmento utilizado para dividir archivos grandes durante la carga, en bytes
    tamaño del fragmento de carga: # opcional
    # Un valor booleano opcional, cuando está habilitado, permite que los ejecutores de Windows guarden o restauren cachés que se pueden restaurar o guardar respectivamente en otras plataformas
    enableCrossOsArchive: # opcional, el valor predeterminado es falso
    # El flujo de trabajo falla si no se encuentra la entrada de caché
    fail-on-cache-miss: # opcional, el valor predeterminado es falso
    # Verifica si existe una entrada de caché para las entradas dadas (clave, claves de restauración) sin descargar el caché
    solo búsqueda: # opcional, el valor predeterminado es falso
    # Ejecute el paso posterior para guardar el caché incluso si falla otro paso anterior
    guardar siempre: # opcional, el valor predeterminado es falso

 - nombre: Configurar el entorno Node.js
  usos: acciones/setup-node@v3.9.1
  con:
    # Establezca always-auth en npmrc.
    always-auth: # opcional, el valor predeterminado es falso
    Especificación de la versión a utilizar. Ejemplos: 12.x, 10.15.1, >=10.15.0.
    node-version: # opcional
    Archivo que contiene la especificación de la versión a utilizar. Ejemplos: .nvmrc, .node-version, .tool-versions.
    archivo-versión-nodo: # opcional
    # Arquitectura de destino que usará Node. Ejemplos: x86, x64. Se usará la arquitectura del sistema por defecto.
    arquitectura: # opcional
    # Configure esta opción si desea que la acción busque la última versión disponible que satisfaga la especificación de la versión.
    check-latest: # opcional
    Registro opcional para la autenticación. Se establecerá el registro en archivos .npmrc y .yarnrc a nivel de proyecto y se configurará la autenticación para leer desde env.NODE_AUTH_TOKEN.
    URL del registro: # opcional
    # Ámbito opcional para la autenticación en registros con ámbito. Se recurrirá al propietario del repositorio al usar el registro de paquetes de GitHub (https://npm.pkg.github.com/).
    alcance: # opcional
    # Se usa para extraer distribuciones de nodos de node-versions. Dado que hay un valor predeterminado, normalmente no lo proporciona el usuario. Al ejecutar esta acción en github.com, el valor predeterminado es suficiente. Al ejecutar en GHES, puede pasar un token de acceso personal a github.com si experimenta limitaciones de velocidad.
    token: # opcional, el valor predeterminado es ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Se utiliza para especificar un gestor de paquetes para el almacenamiento en caché en el directorio predeterminado. Valores admitidos: npm, yarn, pnpm.
    caché: # opcional
    # Se utiliza para especificar la ruta a un archivo de dependencia: package-lock.json, yarn.lock, etc. Admite caracteres comodín o una lista de nombres de archivos para almacenar en caché múltiples dependencias.
    ruta de dependencia de caché: # opcional
- nombre: Configurar el entorno Go
  usos: acciones/setup-go@v5.5.0
  con:
    La versión Go para descargar (si es necesario) y usar. Compatible con especificaciones y rangos de Semver. Asegúrese de escribir esta opción entre comillas simples.
    go-version: # opcional
    # Ruta al archivo go.mod o go.work.
    go-version-file: # opcional
    # Establezca esta opción en verdadero si desea que la acción siempre busque la última versión disponible que satisfaga la especificación de la versión.
    check-latest: # opcional
    # Se usa para extraer distribuciones de Go de las versiones de Go. Dado que hay un valor predeterminado, normalmente el usuario no lo proporciona. Al ejecutar esta acción en github.com, el valor predeterminado es suficiente. Al ejecutar en GHES, puede pasar un token de acceso personal a github.com si experimenta limitaciones de velocidad.
    token: # opcional, el valor predeterminado es ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Se utiliza para especificar si se necesita almacenamiento en caché. Establézcalo en verdadero si desea habilitar el almacenamiento en caché.
    caché: # opcional, el valor predeterminado es verdadero
    # Se utiliza para especificar la ruta a un archivo de dependencia - go.sum
    ruta de dependencia de caché: # opcional
    # Arquitectura de destino para Go. Ejemplos: x86, x64. Se usará la arquitectura del sistema por defecto.
    arquitectura: # opcional
- nombre: Configurar Java JDK
  usos: acciones/setup-java@v3.14.1
  con:
    La versión de Java que se configurará. Admite una versión completa o parcial de Java. Consulte ejemplos de sintaxis compatibles en el archivo README.
    java-version: # opcional
    # La ruta al archivo `.java-version`. Consulte ejemplos de sintaxis compatibles en el archivo README.
    archivo de versión de java: # opcional
    Distribución de Java. Consulte la lista de distribuciones compatibles en el archivo README.
    distribución:
    # El tipo de paquete (jdk, jre, jdk+fx, jre+fx)
    java-package: # opcional, el valor predeterminado es jdk
    # La arquitectura del paquete (por defecto la arquitectura del ejecutor de acciones)
    arquitectura: # opcional
    # Ruta donde se encuentra el JDK comprimido
    jdkFile: # opcional
    # Configure esta opción si desea que la acción busque la última versión disponible que cumpla con la especificación de la versión.
    check-latest: # opcional
    ID del repositorio de administración de distribución en el archivo pom.xml. El valor predeterminado es `github`.
    server-id: # opcional, el valor predeterminado es github
    # Nombre de la variable de entorno para el nombre de usuario para la autenticación en el repositorio Apache Maven. El valor predeterminado es $GITHUB_ACTOR
    nombre-de-usuario-servidor: # opcional, el valor predeterminado es GITHUB_ACTOR
    # Nombre de la variable de entorno para la contraseña o token de autenticación en el repositorio Apache Maven. El valor predeterminado es $GITHUB_TOKEN
    contraseña del servidor: # opcional, el valor predeterminado es GITHUB_TOKEN
    Ruta donde se escribirá el archivo settings.xml. El valor predeterminado es ~/.m2.
    ruta de configuración: # opcional
    # Sobrescribir el archivo settings.xml si existe. El valor predeterminado es "true".
    overwrite-settings: # opcional, el valor predeterminado es verdadero
    Clave privada GPG para importar. El valor predeterminado es una cadena vacía.
    clave privada gpg: # opcional
    Nombre de la variable de entorno para la contraseña de la clave privada GPG. El valor predeterminado es $GPG_PASSPHRASE.
    frase de contraseña gpg: # opcional
    # Nombre de la plataforma de compilación donde se almacenarán las dependencias en caché. Puede ser "maven", "gradle" o "sbt".
    caché: # opcional
    Solución alternativa para pasar el estado del trabajo al paso posterior al trabajo. Esta variable no está diseñada para configuración manual.
    job-status: # opcional, el valor predeterminado es ${{ job.status }}
    # El token utilizado para la autenticación al obtener manifiestos de versiones alojados en github.com, como en el caso de Microsoft Build de OpenJDK. Al ejecutar esta acción en github.com, el valor predeterminado es suficiente. Al ejecutar en GHES, puede pasar un token de acceso personal para github.com si experimenta limitaciones de velocidad.
    token: # opcional, el valor predeterminado es ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Nombre del ID de la cadena de herramientas de Maven si no se desea el nombre predeterminado "${distribution}_${java-version}". Consulte ejemplos de sintaxis compatibles en el archivo de uso avanzado.
    mvn-toolchain-id: # opcional
    # Nombre del proveedor de la cadena de herramientas Maven si no se desea el nombre predeterminado "${distribution}". Consulte ejemplos de sintaxis compatibles en el archivo de uso avanzado.
    mvn-toolchain-vendor: # opcional
          
          
          
          
          
